1- the number of map workers and the number of reduce workers
2- it inherits run from MapReduce, which calls its Map and its Reduce with its workers
3- keyvalue is an offset for the map worker to start at, value is the text from that offset
4- key is a word, keyvalues is a list of n tuples containing that word and 1, where n is the number of repetitions of that word
5- 4 counts of doMap
   2 counts of doReduce
   because it runs WordCount(4,2,sys.argv[1]), and the 4 and 2 refer to the number of map tasks and reduce tasks.
6- doMaps run parallel
   doReduces run parallel
7- 1208691
8- 2250
9- I see speedup when running 6 maptasks and 4 reducetasks
10- # An instance of the MapReduce framework. It performs word count on title-cased words.
class ReverseIndex(MapReduce):

    def __init__(self, maptask, reducetask, path):
        MapReduce.__init__(self,  maptask, reducetask, path)

    # Produce a (key, value) pair for each title word in value
    def Map(self, keyvalue, value):
        results = []
        i = 0
        n = len(value)
        while i < n:
            # skip non-ascii letters in C/C++ style a la MapReduce paper:
            while i < n and value[i] not in string.ascii_letters:
                i += 1
            start = i
            while i < n and value[i] in string.ascii_letters:
                i += 1
            w = value[start:i]
            if start < i and w.istitle():
                results.append ((w.lower(), start+int(keyvalue)))
        return results

    # Reduce [(key,value), ...])
    def Reduce(self, key, keyvalues):
        return (key, sorted(list(pair[1] for pair in keyvalues)))


It took me 30 minutes or so.

P.S. Sorry for the late submissions, it's taken me longer than I expected to recover from my surgery (that I verified with S^3 a long time ago), and to make-up work in other classes. I understand if my grade is reduced due to this delay. Thanks, Kevin
