#!/usr/bin/python2

import simplejson as json
import subprocess
import sys
import os
print "Running!"


def debug(string):
    print string

def error(string, e=None):
    print "ERROR:"
    print string
    if e is not None:
        print '(%s) %s' %(str(e.errno),e.strerror)
    exit(1)

def run(videoid):
    debug('Video id: %s'%videoid)


    required_paths = ['youtube2png',
                      'youtube2png/video',
                      'youtube2png/song',
                      'youtube2png/duration',
                      'youtube2png/wav',
                      'youtube2png/thumb',
                      'youtube2png/description',
                      'youtube2png/info',
                      'youtube2png/png',
                      'youtube2png/peaks'
                     ]
    for path in required_paths:
        if not os.path.exists(path):
            try:
                debug('Creating directory: %s'%path)
                os.mkdir(path)
            except Exception as e:
                error('failed to make directory: %s'%path,e)

    if not os.path.isfile('youtube2png/video/%s.mp4'%videoid):
        debug('running youtube-dl')
        args=['./youtube2png/youtube-dl',
              '--no-playlist',
              '--extract-audio',
              '--audio-quality',
              '0',
              '--write-description',
              '--write-thumbnail',
              '--write-info-json',
              '--keep-video',
              '--id',
              '--reject-title',
              'Oeps interview blooper',
              'url',
              'http://www.youtube.com/watch?v=%s'%videoid
             ]
        try:
            subprocess.call(args)
        except Exception as e:
            error('youtube-dl failed!', e)
        try:
            os.rename('%s.mp4'%videoid, 'youtube2png/video/%s.mp4'%videoid)
            os.rename('%s.jpg'%videoid, 'youtube2png/thumb/%s.jpg'%videoid)
            os.rename('%s.mp4.description'%videoid, 'youtube2png/description/%s.txt'%videoid)
            os.rename('%s.info.json'%videoid, 'youtube2png/info/%s.json'%videoid)
            os.rename('%s.m4a'%videoid, 'youtube2png/song/%s.m4a'%videoid)
        except Exception as e:
            error('youtube-dl failed!', e)

    if not os.path.isfile('youtube2png/wav/%s.wav'%videoid):
        debug("running ffmpeg")
        args=['ffmpeg',
              '-i',
              'youtube2png/song/%s.m4a'%videoid,
              'youtube2png/wav/%s.wav'%videoid
             ]
        try:
            subprocess.call(args)
        except Exception as e:
            error('ffmpeg failed!', e)

    with open('youtube2png/info/%s.json'%videoid,'r') as jsonfile:
        data = json.load(jsonfile)
    duration = data['duration']

    if not os.path.isfile('youtube2png/duration/%s.txt'%videoid):
        try:
            with open('youtube2png/duration/%s.txt'%videoid,'w') as durationfile:
                durationfile.write(str(duration))
        except Exception as e:
            error('writing duration file failed!', e)

    if not os.path.isfile('youtube2png/png/%s.png'%videoid):
        debug('running wav2png')
        args=['./youtube2png/wav2png',
              '-w'
              '%s'%str(int(duration)*6),
              '-o',
              'youtube2png/png/%s.png'%videoid,
              'youtube2png/wav/%s.wav'%videoid
             ]
        try:
            subprocess.call(args)
        except Exception as e:
            error('wav2png failed!',e)

    if not os.path.isfile('peaks/%s.txt'%videoid):
        print "running julia"
        args=['julia',
              'youtube2png/wave.jl',
             'youtube2png/png/%s.png'%videoid
             ]
        try:
            juliaout = subprocess.check_output(args)
        except Exception as e:
            error('wave.jl failed!', e)
        try:
            with open('youtube2png/peaks/%s.txt'%videoid,'w') as peakfile:
                peakfile.write(juliaout)
        except Exception as e:
            error('writing peaks file failed!', e)




    debug('%s seconds'%duration)

