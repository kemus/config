<!DOCTYPE html>

<!--
  COLLABORATORS:None

-->
<html>

<head>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<title>Checkerboard</title>

<!-- Load style sheets -->
<link rel="stylesheet" type="text/css" href="mainLayout.css" />

<!-- Load any supplemental Javascript libraries here -->
<script type="text/javascript" src="external_js/jquery-1.9.0.min.js"></script>
<script type="text/javascript" src="checker.js"></script>
<script type="text/javascript" src="boardEvent.js"></script>
<script type="text/javascript" src="board.js"></script>
<script type="text/javascript" src="rules.js"></script>

<script type="text/javascript">

//This script extracts parameters from the URL
//from jquery-howto.blogspot.com

    $.extend({
        getUrlVars : function() {
            var vars = [], hash;
            var hashes = window.location.href.slice(
                    window.location.href.indexOf('?') + 1).split('&');
            for ( var i = 0; i < hashes.length; i++) {
                hash = hashes[i].split('=');
                vars.push(hash[0]);
                vars[hash[0]] = hash[1];
            }
            return vars;
        },
        getUrlVar : function(name) {
            return $.getUrlVars()[name];
        }
    });

    var DEFAULT_BOARD_SIZE = 8;

    var CANVAS_SIZE = 400;
    var CANVAS_X = 200;
    var CANVAS_Y = 15;

    //data model
    var board;
    var rules;
    var whoseTurn = "black";
    var undoStack = [];
    var redoStack = [];
    var squareSize;

    function directionOf(color) {
        return color == 'black'? -1 : 1;
    }

    function toggleTurn() {
        whoseTurn = whoseTurn == 'black' ? 'red' : 'black';
        document.getElementById("turn").innerHTML=whoseTurn+"'s turn";
    }

    // This allows the Javascript code inside this block to only run when the page
    // has finished loading in the browser.
    $(document).ready(function() {
        if ($.getUrlVar('size') && $.getUrlVar('size') >= 6) {
            board = new Board($.getUrlVar('size'));
        } else {
            board = new Board(DEFAULT_BOARD_SIZE);
        }

        rules = new Rules(board);
        squareSize = Math.floor(CANVAS_SIZE/board.boardSize);



        var canvas = document.getElementById('boardCanvas');
        var arrowCanvas = document.getElementById('arrowCanvas');
        canvas.width=CANVAS_SIZE;
        canvas.height=CANVAS_SIZE;
        arrowCanvas.width=CANVAS_SIZE;
        arrowCanvas.height=CANVAS_SIZE;
        var boardContext = canvas.getContext('2d');
        var arrowContext = arrowCanvas.getContext('2d');

        boardContext.clearRect(0,0,CANVAS_SIZE,CANVAS_SIZE);
        arrowContext.clearRect(0,0,CANVAS_SIZE,CANVAS_SIZE);


        //draw the board
        for(y=0; y+squareSize<=CANVAS_SIZE; y+=squareSize){
            for(x=0; x+squareSize<=CANVAS_SIZE; x+=squareSize){
                // Alternate colors
                boardContext.fillStyle = ((y+x)%(2*squareSize))? "#999999" : "#FFFFFF";
                boardContext.fillRect(x,y,squareSize,squareSize);
            }
        }




        function addPiece(checker, row, col){
            var image = document.createElement('img');
            image.setAttribute('id', 'checker' + row +'x' + col);
            image.width=squareSize;
            image.height=squareSize;
            document.getElementById('all').appendChild(image);

            // set the class to the right color
            image.setAttribute('class', checker.color+'checker');

            // set the image src to be the right color + kingliness
            type = checker.isKing? 'king' : 'piece';
            image.setAttribute('src', 'graphics/'+ checker.color+'-'+type+'.png');

            // set the correct image location
            image.style.top = row*squareSize+CANVAS_Y+"px";
            image.style.left = col*squareSize+CANVAS_X+"px";
            image.style.display="block";
        }
        function movePiece(checker, fromRow, fromCol, toRow, toCol){
            var image = document.getElementById('checker' + fromRow + 'x' + fromCol);
            image.style.top = toRow*squareSize+CANVAS_Y+"px";
            image.style.left = toCol*squareSize+CANVAS_X+"px";
            image.setAttribute('id', 'checker' + toRow +'x' + toCol);
            fromX=fromCol*squareSize+Math.floor(squareSize/2);
            fromY=fromRow*squareSize+Math.floor(squareSize/2);
            toX=toCol*squareSize+Math.floor(squareSize/2);
            toY=toRow*squareSize+Math.floor(squareSize/2);

            arrowContext.clearRect(0,0,CANVAS_SIZE,CANVAS_SIZE);
            //find angle to draw arrow in
            angle = Math.atan2(toY-fromY,toX-fromX);
            length = Math.floor(Math.sqrt(Math.pow(toY-fromY,2) + Math.pow(toX-fromX,2)));
            //color the arrow
            arrowContext.strokeStyle="#FF0";
            arrowContext.fillStyle="#FF0";
            arrowContext.lineWidth=3;
            // save our context so we can restore it
            arrowContext.save();
            //reset the origin
            arrowContext.translate(fromX,fromY);
            //rotate the context
            arrowContext.rotate(angle);
            arrowContext.beginPath();
            arrowContext.moveTo(0,0);
            //draw the arrow
            arrowContext.lineTo(length,0);
            arrowContext.closePath();
            arrowContext.stroke();
            //draw the arrowhead
            arrowContext.beginPath();
            arrowContext.moveTo(length,0);
            arrowContext.lineTo(length-10,-10);
            arrowContext.lineTo(length-10,10);
            arrowContext.lineTo(length,0);
            arrowContext.fill();
            arrowContext.stroke();

            //restore the arrowContext
            arrowContext.restore()
        }

        function removePiece(checker,row,col){
            var image = document.getElementById('checker' + row + 'x' + col);
            document.getElementById('all').removeChild(image);
        }
        function promotePiece(checker){
            var image = document.getElementById('checker' + checker.row + 'x' + checker.col);

            // set the image src to be the right color + kingliness
            type = checker.isKing? 'king' : 'piece';
            image.setAttribute('src', 'graphics/'+ checker.color+'-'+type+'.png');
        }

        board.addEventListener('add', function(e){
            addPiece(e.details.checker, e.details.row, e.details.col);
        }, true);
        board.addEventListener('move', function(e){
            movePiece(e.details.checker, e.details.fromRow, e.details.fromCol, e.details.toRow, e.details.toCol);
        }, true);
        board.addEventListener('remove', function(e){
            removePiece(e.details.checker, e.details.row, e.details.col);
        }, true);
        board.addEventListener('promote', function(e){
            promotePiece(e.details.checker);
        }, true);

        $("#btnNewGame").click(function(evt) {
            whoseTurn="black"
            document.getElementById("turn").innerHTML=whoseTurn+"'s turn"

            arrowContext.clearRect(0,0,CANVAS_SIZE,CANVAS_SIZE);
            undoStack = [];
            redoStack = [];
            $('#btnUndo').prop('disabled', true);
            $('#btnRedo').prop('disabled', true);
            board.lastMove=new Object();
            board.prepareNewGame();
        });

        $("#btnAutoMove").click(function(evt) {
          var playerColor = whoseTurn;
          var playerDirection = directionOf(playerColor);
          var result = rules.makeRandomMove(playerColor, playerDirection);
          if (result != null) {
            undoStack.push(result);
            redoStack = [];
            $('#btnRedo').prop('disabled', true);
            $('#btnUndo').prop('disabled', false);
            toggleTurn();
          }
        });
        $("#btnUndo").click(function(evt){
                move = undoStack.pop();
                if(undoStack.length < 1){
                $('#btnUndo').prop('disabled', true);
                }
                $('#btnRedo').prop('disabled', false);
                redoStack.push(move);
                checker = board.getCheckerAt(move.to_row,move.to_col)
                if(move.made_king){
                    color = checker.color
                    board.remove(checker);

                    checker = new Checker(color, false);

                    board.add(checker, move.from_row, move.from_col);

                }
                else{
                board.moveTo(checker, move.from_row, move.from_col)
                }
                for(var i=0; i<move.remove.length; i+=1){
                    var piece = move.remove[i];
                    var newpiece = new Checker(piece.color, piece.isKing);
                    board.add(newpiece, piece.row, piece.col);
                }
                toggleTurn();
                //from_col
                //to_col
                //from_row
                //to_row
                //made_king
                //removed: col, row, color, isKing
        });
        $("#btnRedo").click(function(evt){
                move = redoStack.pop();
                undoStack.push(move);
                if(redoStack.length < 1){
                $('#btnRedo').prop('disabled', true);
                }
                $('#btnUndo').prop('disabled', false);
                checker = board.getCheckerAt(move.from_row,move.from_col)
                if(move.made_king){
                    color = checker.color
                    board.remove(checker);

                    checker = new Checker(color, true);

                    board.add(checker, move.to_row, move.to_col);

                }
                else{
                board.moveTo(checker, move.to_row, move.to_col)
                }
                for(var i=0; i<move.remove.length; i+=1){
                    var piece = move.remove[i];
                    var removepiece = board.getCheckerAt(piece.row,piece.col);
                    board.remove(removepiece)
                }
                toggleTurn();
                //from_col
                //to_col
                //from_row
                //to_row
                //made_king
                //removed: col, row, color, isKing
        });


        board.prepareNewGame();


    });
</script>


</head>

<body>
<table id="mainTable">
    <tr>
        <td id="navigation">
            <table>
                <tr><td><span id="turn">black's turn</span></td></tr>
                <tr><td><input id="btnNewGame" type="button" name="new" value="New Game"/></td></tr>
                <tr><td><input id="btnAutoMove" type="button" name="new" value="Auto Move"/></td></tr>
                <tr><td><input id="btnUndo" disabled='true' type="button" name="new" value="Undo Move"/></td></tr>
                <tr><td><input id="btnRedo" disabled='true' type="button" name="new" value="Redo Move"/></td></tr>
            </table>
        </td>
        <div id="content" >
            <canvas id="boardCanvas" padding="0"></canvas>
            <canvas id="arrowCanvas" padding="0"></canvas>
    </tr>

   </table>
<div id='all'></div>

<script type="text/javascript">
var dragStartX = 0;            // mouse starting positions
var dragStartY = 0;
var imageStartX = 0;           // current element offset
var imageStartY = 0;
var dragImage;           // needs to be passed from OnMouseDown to OnMouseMove
function ExtractNumber(value){
    var n = parseInt(value);
    if(n == null || isNaN(n)){
        n = 0;
    }
    return n
}

DragDrop();
function DragDrop(){
    document.onmousedown = OnMouseDown;
    document.onmouseup = OnMouseUp;
}

function OnMouseDown(e){
    var target = e.target;
    if (target.className.indexOf("checker") !== -1){

        if(target.className.indexOf("black") !== -1){
            pieceDirection = -1;
        }
        else{
            pieceDirection=1;
        }
        turnDirection = directionOf(whoseTurn);
        if(pieceDirection != turnDirection){
            return false
        }

        // grab the mouse position
        dragStartX = e.clientX;
        dragStartY = e.clientY;

        imageStartX = ExtractNumber(target.style.left);
        imageStartY = ExtractNumber(target.style.top);

        target.style.zIndex = 100;

        dragImage = target;

        document.onmousemove = OnMouseMove;
        document.body.focus();
        document.onselectstart = function () { return false; };
        target.ondragstart = function() { return false; };

        return false;
    }
}
function OnMouseMove(e)
{
    if (e == null)
        var e = window.event;

    // this is the actual "drag code"
    dragImage.style.left = (imageStartX + e.clientX - dragStartX) + 'px';
    dragImage.style.top = (imageStartY + e.clientY - dragStartY) + 'px';

}
function OnMouseUp(e)
{
    if (dragImage != null)
    {
        dragImage.style.zIndex = 25
        // we're done with these events until the next OnMouseDown
        document.onmousemove = null;
        document.onselectstart = null;
        dragImage.ondragstart = null;


        size = Math.floor(CANVAS_SIZE/board.boardSize)

        toXPos = e.clientX-200;
        toYPos = e.clientY-15;
        toX=Math.floor(toXPos/size);
        toY=Math.floor(toYPos/size);
        fromXPos = imageStartX-200;
        fromYPos = imageStartY-15;
        fromX = Math.floor(fromXPos/size);
        fromY = Math.floor(fromYPos/size);
        if(dragImage.className.indexOf("black") !== -1){
            pieceDirection = -1;
        }
        else{
            pieceDirection=1;
        }
        turnDirection = directionOf(whoseTurn);

        checker = board.getCheckerAt(fromY,fromX)
        valid = rules.makeMove(checker, turnDirection, pieceDirection, toY, toX);
        if(valid == null){
            dragImage.style.left = imageStartX + 'px';
            dragImage.style.top = imageStartY + 'px';
            return false
        }
        undoStack.push(valid);
        redoStack = [];
        $('#btnUndo').prop('disabled', false);
        $('#btnRedo').prop('disabled', true);
        toggleTurn();
        // this is how we know we're not dragging
        dragImage = null;

    }
}

</script>
</body>

</html>
