# This is an example resource file for rTorrent. Copy to
# ~/.rtorrent.rc and enable/modify the options as needed. Remember to
# uncomment the options you wish to enable.

# Maximum and minimum number of peers to connect to per torrent.
min_peers = 32
max_peers = 64

# Same as above but for seeding completed torrents (-1 = same as downloading)
min_peers_seed = 1
max_peers_seed = 1

# Maximum number of simultanious uploads per torrent.
max_uploads = 1

# Global upload and download rate in KiB. "0" for unlimited.
download_rate = 0
upload_rate = 25

# The ip address reported to the tracker.
#ip = 127.0.0.1
#ip = rakshasa.no

# The ip address the listening socket and outgoing connections is bound to.
#bind = 127.0.0.1
#bind = rakshasa.no

# Port range to use for listening.
port_range = 64842-64842

# Do not start opening ports at a random position within the port range.
port_random = no

# Check hash for finished torrents.
check_hash = yes

# Set whether the client should try to connect to UDP trackers.
use_udp_trackers = yes

# Alternative calls to bind and ip that should handle dynamic ip's.
#schedule = ip_tick,0,1800,ip=rakshasa
#schedule = bind_tick,0,1800,bind=rakshasa

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
encryption = allow_incoming,try_outgoing,enable_retry

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
dht = auto

# UDP port to use for DHT.
dht_port = 6881

# Enable peer exchange (for torrents not marked private)
peer_exchange = yes

# location where new torrent data is placed, and where you should place your
# 'complete' data before you place your *.torrent file into the watch folder
directory = /home/kevin/torrents/incomplete

# Default session directory.
session = /home/kevin/torrents/session

# schedule a timer event named 'watch_directory_1':
#  triggers 10 seconds after rtorrent starts
#  triggers at 10 second intervals thereafter
#  Upon trigger, attempt to load (and start) new *.torrent files found in /home/kevin/torrents/watch/
#  set a variable named 'custom1' with the desired path
# NOTE: if you do not want it to automatically start the torrent, change 'load_start' to 'load'
schedule = watch_directory_1,10,10,"load_start=/home/kevin/torrents/watch/*.torrent,d.set_custom1=/home/kevin/torrents/complete/"
schedule = watch_directory_3,10,10,"load_start=/home/kevin/torrents/watch/audio/*.torrent,d.set_custom1=/home/kevin/torrents/complete/audio"
schedule = watch_directory_2,10,10,"load_start=/home/kevin/torrents/watch/ebook/*.torrent,d.set_custom1=/home/kevin/torrents/complete/ebook"
schedule = watch_directory_2,10,10,"load_start=/home/kevin/torrents/watch/misc/*.torrent,d.set_custom1=/home/kevin/torrents/complete/misc"
schedule = watch_directory_2,10,10,"load_start=/home/kevin/torrents/watch/porn/*.torrent,d.set_custom1=/home/kevin/torrents/complete/porn"
schedule = watch_directory_2,10,10,"load_start=/home/kevin/torrents/watch/video/*.torrent,d.set_custom1=/home/kevin/torrents/complete/video"

# checkdirs1 method:
#  returns true if the current path of the torrent data is not equal to the value of custom1
system.method.insert=checkdirs1,simple,"not=\"$equal={d.get_custom1=,d.get_base_path=}\""

# movecheck1 method
#  returns true if [(the torrent data is not in the custom1 path) && (100% downloaded) && (torrent has a custom1 path)]
system.method.insert=movecheck1,simple,"and={checkdirs1=,d.get_complete=,d.get_custom1=}"

# movedir1 method
#  set path of torrent to equal the value of custom1
#  mv -u <current data path> <custom1 path>
#  clear custom1
#  stop the torrent
#  start the torrent (to get the torrent to update the 'base path')
system.method.insert=movedir1,simple,"d.set_directory=$d.get_custom1=;execute=mv,-u,$d.get_base_path=,$d.get_custom1=;d.set_custom1=;d.stop=;d.start="

# move_hashed1 key
# triggered when hashing of a torrent completes
#   -- Only runs on manual hash checks [Control+r by default], or on an rtorrent restart
# if movecheck1 returns true,
#     then execute movedir1
system.method.set_key=event.download.hash_done,move_hashed1,"branch={$movecheck1=,movedir1=}"

# Close torrents when diskspace is low.
schedule = low_diskspace,5,60,close_low_diskspace=100M

system.method.set_key = event.download.finished,notify_me,"execute=/path/to/mail.sh,.get_name="
